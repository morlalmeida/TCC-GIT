function [fitness,pitch] = evaluate_fitness(x)
    %% Load Global Parameters
    global Vs MTOW;

    %% Setting Initial Parameters    
    M = 2; % Number of objectives
    fitness = [1e6, 1e6]; % Default infeasible output

    Diameter = x(1);
    % Pitch = x(2);
    Nblades = round(x(2));
    RPM_op = 3000;

    %% Check Parallel Pool (Limited to 5 Cores)
    poolobj = gcp('nocreate'); 
    if isempty(poolobj)
        parpool(5); % Start parallel pool if not already running
    end

    %% Checking Tip Speed Conformity
    R = (Diameter / 39.37) / 2; % Convert to meters
    omega = RPM_op * 2 * pi / 60; % Angular velocity (rad/s)
    TipSpeed = omega * R; % Tip speed (m/s)
    MaxTipSpeed = 340; % Maximum allowable tip speed (m/s)

    if TipSpeed > 0.9 * MaxTipSpeed
        % Constraint violated, return infeasible solution
        fprintf('Tip speed exceeds Mach threshold! Mach: %.2f\n', TipSpeed / MaxTipSpeed);
        return;
    end

    %% Running QPROP
    try
        [pitch] = prop_wrV3(x); % Generate Propeller Archive
        % pitch = check_pitch;
        
        % Run Static QPROP (Hover)
        Result1 = stat_qprop;
        RPM = Result1.RPMs;
        Power_Elec = 4.*Result1.Pelectric;
        hover_thrust = 4.*Result1.Thrust;
        target_Power = 496; %kW, Peak EMRAX 228
        
        % Checking Static Constraints
        RPM_closest = interp1(Power_Elec, RPM, target_Power);

        % If the interpolated RPM is below 3000, find TWR at 3000 RPM
        if RPM_closest <= 3000
            TWR_3000 = interp1(RPM, hover_thrust, 3000); % Interpolating TWR at 3000 RPM
        elseif isnan(RPM_closest) || RPM_closest >= 3000
            return
        end

        thrust_index = TWR_3000 / (MTOW * 9.787);

        if thrust_index < 1.4
            return
        end

        % Run Dynamic QPROP (Cruise)
        Result2 = dyn_qprop;
        [fspeed, Vs] = power_thrust(Result2);

        % Determine valid flight speed
        if isempty(fspeed)
            fspeed_true = NaN;
            return
        elseif isscalar(fspeed) && fspeed > Vs
            fspeed_true = 0.8*fspeed;
        else
            valid_speeds = fspeed(fspeed > Vs);
            if ~isempty(valid_speeds)
                fspeed_true = 0.8 * min(valid_speeds); % Apply safety factor
            else
                return; % No valid flight speed found
            end
        end

        % Check Stall Speed Constraint
        if fspeed_true <= Vs
            fprintf('Flight speed is below stall! Speed: %.2f\n', fspeed_true);
            return;
        end

        % % Apply Penalty for Out-of-Range Flight Speed (Using Normalized Values)
        % speed_penalty_weight = 5; % Adjust based on optimization needs

        % Adaptive penalty weight based on flight speed deviation
        max_penalty_weight = 5;  % Reduce from 10
        min_penalty_weight = 2;
        % Compute how far the solution is from the desired range
        
        center_speed_ratio = (32 + 55) / (2 * Vs); 

        deviation_factor = abs((fspeed_true / Vs) - center_speed_ratio)/(center_speed_ratio); % Distance from center of range

        % Scale the penalty weight adaptively
        % speed_penalty_weight = min_penalty_weight + (max_penalty_weight - min_penalty_weight) * deviation_factor / ((55-32)/Vs));
        speed_penalty_weight = min_penalty_weight + (max_penalty_weight - min_penalty_weight) * deviation_factor^2;

        % if (fspeed_true / Vs) > (max_speed_ratio - 0.05) && (thrust_index > 1.5)
        %     speed_penalty_weight = speed_penalty_weight * 0.5; % Reduce penalty for strong solutions
        % end
%% TESTING PARABOLA SHAPE
        % Compute the average thrust in the current population (to define the plateau adaptively)
        persistent avg_thrust_history;
        if isempty(avg_thrust_history)
            avg_thrust_history = [];
        end

        % Store thrust index history to track how solutions evolve
        avg_thrust_history = [avg_thrust_history, thrust_index]; 
        if length(avg_thrust_history) > 50  % Keep history manageable
            avg_thrust_history = avg_thrust_history(end-50:end);
        end

        % Compute adaptive "flat" region based on real solution trends
        flat_region_start = mean(avg_thrust_history) - 0.2; % Adjust width of the plateau
        flat_region_height = 2.05; % Keeps solutions stable near y = 2.05

        % Adaptive parabola that follows the solution distribution instead of fixed parameters
        dynamic_curvature = -1.0 + 0.2 * rand(); % Allows slight variation per generation
        dynamic_shift = 2.0 + 0.2 * rand(); % Adjusts parabola center dynamically

        ideal_fspeed = dynamic_curvature * (thrust_index - flat_region_start)^2 + dynamic_shift;

        % Compute deviation from adaptive parabolic front
        parabolic_deviation = abs((fspeed_true / Vs) - ideal_fspeed);


        min_speed_ratio = 32 / Vs; % Convert 36 m/s to normalized speed
        max_speed_ratio = 56 / Vs; % Convert 50 m/s to normalized speed

        % Penalty is applied when speed is outside the range
        speed_penalty = speed_penalty_weight * (max(0, min_speed_ratio - (fspeed_true / Vs)) ...
                                              + max(0, (fspeed_true / Vs) - max_speed_ratio));

        % Mild additional penalty for being close to extreme bounds
        % (ADAPTATIVE/MILD PENALTY)
        buffer_range = 0.05;  % Adjust if needed

        penalty_factor = 0.5; % Lower than main penalty, just a mild discouragement

        if (fspeed_true / Vs) > (max_speed_ratio - buffer_range)
            speed_penalty = speed_penalty + penalty_factor * ((fspeed_true / Vs) - (max_speed_ratio - buffer_range));
        elseif (fspeed_true / Vs) < (min_speed_ratio + buffer_range)
            speed_penalty = speed_penalty + penalty_factor * ((min_speed_ratio + buffer_range) - (fspeed_true / Vs));
        end

        % Introduce a penalty that discourages deviation from the ideal curve
        parabolic_penalty_weight = 2;  % Adjust strength
        speed_penalty = speed_penalty + parabolic_penalty_weight * parabolic_deviation;

        % Apply additional soft constraint to stabilize the plateau region
        if (fspeed_true / Vs) < flat_region_height && thrust_index < flat_region_start + 0.5  
            speed_penalty = speed_penalty + 0.5 * abs(flat_region_height - (fspeed_true / Vs));
end
%%
        if speed_penalty ~= 0
            fprintf('Flight Speed Penalized! Penalty applied: %.4f\n', speed_penalty);
            fprintf('Obtained Speed: %.2f\n', fspeed_true);
            fprintf('Fitness pre-penalty: %.2f\n', fspeed_true/Vs);
            fprintf('\n');
        end

        %% Generate Fitness Vector
        fitness(1) = -thrust_index; % Maximizing thrust
        fitness(2) = -(fspeed_true / Vs) + speed_penalty; % Maximizing flight speed ratio
        % fitness(2) = -(fspeed_scaled / Vs) + speed_penalty; % Maximizing speed ratio with penalty

    catch ME
        warning("Error in evaluate_fitness: %s", ME.message);
    end
end
